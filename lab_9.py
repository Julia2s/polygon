# Задача 16. Найти сумму чисел главной диагонали матрицы
import numpy as np

# Функция для нахождения суммы чисел главной диагонали матрицы
def sum_diag(matrix):
    np_matrix = np.array(matrix)
    diag_sum = np.trace(np_matrix)
    return diag_sum

# Подсчёт асимптотики:
# Создание массива: O(n^2) — преобразование списка в NumPy массив.
# Вычисление суммы диагонали: O(n) — использование np.trace() для нахождения суммы диагонали.
# Итого: O(n^2 + n) = O(n^2)

# Использование памяти: 4 * n^2 байт — хранение матрицы размером n x n, где каждый элемент занимает 4 байта

def test_sum_diag():
    # Матрица 2x2
    assert sum_diag([[1, 1], [1, 2]]) == 3, "Тест 1 не пройден"
    # Матрица 3x3
    assert sum_diag([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 15, "Тест 2 не пройден"
    # Матрица 4x4
    assert sum_diag([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 34, "Тест 3 не пройден"
    # Матрица 1x1
    assert sum_diag([[5]]) == 5, "Тест 4 не пройден"
    # Матрица с нулями
    assert sum_diag([[0, 0], [0, 0]]) == 0, "Тест 5 не пройден"
    # Матрица с отрицательными числами
    assert sum_diag([[-1, 2], [3, -4]]) == -5, "Тест 6 не пройден"
    print("Все тесты пройдены")

if __name__ == "__main__":
    test_sum_diag()
    # Пример из условия
    matrix = [[1, 1], [1, 2]]
    print(sum_diag(matrix))  # Вывод: 3
